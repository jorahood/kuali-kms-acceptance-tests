Acceptance test framework for the Kuali KMS project:
 * Confluence is the Feature editor, you write one feature per page and tag it with "acceptancetest"
 * Bumps handles pulling the Features into Cucumber where they are run, and publishes junit xml report files
   to be consumed with a Confluence {junit} macro on the page on which the Feature lives.
   * the url from which Bumps pulls is called pull_from and is set in features/support/env.rb
 * Browser automation using Culerity (should look into using Selenium on a headless server for better javascript support)

Notes on upgrade from Webrat driving Mechanize to Capybara driving Culerity driving Celerity driving HTMLUnit:
    1. Installed openjdk-6-jre-headless on the server
    2. jruby installed to /usr/local/jruby/bin
    3. added jruby path to PATH in my crontab and my own path
    4. add paths for command line tools jruby needs such as uname, tr, basename, dirname, and, of course, java
    4. jruby -S gem install celerity
    5. sudo gem install culerity
    6. sudo gem install capybara

Crontab:
    MAILTO=jorahood@indiana.edu
    PATH=$PATH:/bin:/usr/bin:/usr/local/jruby/bin
    * * * * * cd /opt/apps/sage-acceptance-tests/; rm features/*.feature > /dev/null 2>&1; /opt/ruby-enterprise/bin/cucumber -p sage > /dev/null 2>&1
    0 0 * * * rm /opt/apps/sage-acceptance-tests/results/index.html; rm /opt/apps/sage-acceptance-tests/results/junit/*

Screenshots:
    To get screenshots of every scenario there are a few prerequisites:

    * Be using a browser driver such as Selenium/Webdriver rather than a browser simulator like htmlunit.

    * Run selenium on a headless server, as I am, you need to use the X-windows virtual frame buffer (Xvfb). For instructions on setting this up I used http://www.alittlemadness.com/2008/03/05/running-selenium-headless/ . Besides just installing it you have to set it up to run on a framebuffer that nothing else uses (by specifying it when starting xvfb), then make sure your Selenium process knows that it should be sending output to that framebuffer (by setting the DISPLAY env var). I used the example value of :99. I then set up Xvfb to run as a daemon by adding this to my crontab: @reboot /usr/local/sbin/daemonize "/usr/bin/Xvfb" ":99 -ac"

    * Install the 'headless' gem to handle communications between ruby and Selenium.

    * Tell cucumber to start headless mode when it is running with Selenium. For this I pasted this gist into my env.rb file: https://gist.github.com/554079 . This also requires setting an env var: SELENIUM_HEADLESS

    * Start cucumber with: SELENIUM_HEADLESS=true DISPLAY=:99 cuc -p sage (don't forget the colon before the 99)

    * Create a cucumber hook to run after scenarios and embed the screenshots in the result page. For this I used Aslak's snippet here without the failed? condition: http://groups.google.com/group/cukes/browse_thread/thread/1303a62c5b40173b/4bc1bba5bd625a14?show_docid=4bc1bba5bd625a14

    * to save typing, I created an alias to run cucumber with the necessary environment variables set in .bashrc: alias noheadcuc="SELENIUM_HEADLESS=true DISPLAY=:99 cuc"
